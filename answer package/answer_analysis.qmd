---
title: "Answer_Analysis"
author: "Igarashi Kosuke"
date: today
execute:
  warning: false
  error: false
format: 
  html:
    code-fold: true
    embed-resources: true
---
```{r packages}
#| echo: false
if (!require("pacman")) install.packages("pacman")

pacman::p_load(
  tictoc,
  dplyr,
  tidyr,
  knitr,
  ggplot2,
  kableExtra,
  here,
  gt,
  gtExtras,
  openxlsx
)

conflicted::conflict_prefer_all("dplyr", quiet = TRUE)
```

## (a) 記述統計

### 1. 「(d) Master Dataの作成」で作成したデータの、各列に含まれるNAの数を数えなさい。
```{r na_counts}
df_master <- readr::read_csv("01_data/intermediate/master.csv")
# colSums関数とis.na関数を組み合わせることで各列のNAの数を数えられる
colSums(is.na(df_master))
```

### 2. 問題背景などを知る上で役に立つ記述統計を作成しなさい
###     - 参考：論文Table1
###     ※ トリートメントに割り当てられる大学数は、論文と整合的ではない。
```{r descriptive_stats}
descriptive_stats <- function(df, columns) {
  # 列名のリネーム(表の表示の際にスムーズ)
  df <- df |>
    rename(
      perwhitecohort = per_white_cohort,
      perwomencohort = per_women_cohort
    )

  # 記述統計(平均・標準偏差)を計算
  stats <- df |>
    select(all_of(columns)) |>
    # 平均・標準偏差の計算
    dplyr::summarise(across(everything(), list(mean = ~ mean(.x, na.rm = TRUE), sd = ~ sd(.x, na.rm = TRUE)))) |>
    # long形式に変更：(変数名)_meanなどとなっているのを分離して表示
    tidyr::pivot_longer(cols = everything(), names_to = c("variable", ".value"), names_sep = "_")

  # 結果を表にまとめる
  kable_output <- stats |>
    kable() |>
    kable_styling(full_width = FALSE)

  return(kable_output)
}
```

```{r}
list_mean_vars <- c(
  "semester",
  "gradrate4yr",
  "mengradrate4yr",
  "womengradrate4yr",
  "instatetuition",
  "costs",
  # リネームした後の列名
  "perwhitecohort",
  "perwomencohort"
)

descriptive_stats(df_master, list_mean_vars)
```

### 3. 4年卒業率の平均推移を計算し、図で示しなさい
###     - 参考：論文Figure1
```{r gradrate_transition}
df_plot_based <- df_master |>
  dplyr::summarise(
    mean = mean(gradrate4yr, na.rm = TRUE),
    .by = year
  )


ggplot(df_plot_based, aes(x = year, y = mean)) +
  # geom_point() +
  # 折れ線グラフ
  geom_line() +
  # 背景を白にする
  theme_bw() +
  # y軸のスケール設定
  scale_y_continuous(
    # y軸の範囲を0.25から0.45に設定
    limits = c(0.25, 0.45),
    # y軸の目盛りを0.25から0.45の範囲で0.05刻みに設定
    breaks = seq(0.25, 0.45, 0.05)
  ) +
  # タイトル・ラベルの設定
  labs(
    title = "Fraction of Four-Year Graduation Rates"
  )
```

### 4. semester導入率を計算し、図で示しなさい
###     - 参考：論文Figure1
```{r introduce_rate}
df_plot_based <- df_master |>
  dplyr::summarise(
    semester_size = sum(semester),
    total_size = dplyr::n(),
    .by = c(year)
  ) |>
  dplyr::mutate(
    percent = semester_size / total_size
  )

ggplot(df_plot_based, aes(x = year, y = percent)) +
  geom_line() +
  theme_bw() +
  scale_y_continuous(
    limits = c(0.80, 1),
    breaks = seq(0.80, 1, 0.05)
  ) +
  labs(
    title = "Fraction of Schools on Semesters"
  )
```
### 5. 以下の3つの変数を横軸、「4年卒業率」を縦軸にとった、散布図を作成しなさい。
###     1. 女子学生比率
```{r scatterplot_womenrate}
ggplot(df_master, aes(x = per_women_cohort, y = gradrate4yr)) +
  # 点のプロット
  geom_point() +
  labs(
    title = "Scatter plot of per_women_cohort and gradrate4yr",
    x = "per_women_cohort",
    y = "gradrate4yr"
  )
```

###     2. 白人学生割合
```{r scatterplot_white}
ggplot(df_master, aes(x = per_white_cohort, y = gradrate4yr)) +
  geom_point() +
  labs(
    title = "Scatter plot of per_white_cohort and gradrate4yr",
    x = "per_white_cohort",
    y = "gradrate4yr"
  )
```

###     3. 学費(instatetuition)
```{r scatterplot_instatetuition}
ggplot(df_master, aes(x = instatetuition, y = gradrate4yr)) +
  geom_point() +
  labs(
    title = "Scatter plot of instatetuition and gradrate4yr",
    x = "instatetuition",
    y = "gradrate4yr"
  )
```

## (b) 回帰分析

###### 1. 以下の式を推定し、表にまとめなさい。
- $s$：大学、$t$：年、$Y_{st}$：大学$s$, 年$t$の4年卒業率、$After_{st}：$大学s, 年tの時の、semester制導入のダミー変数 
$$ 
Y_{st} = \beta_0 + \beta_1 \text{After}_{st} + \varepsilon_{st} \label{base_eq}\tag{1}
$$  

```{r regression}
gradrate_regression <- function(df, y, x) {
  # fct型に変換
  df[[x]] <- as.factor(df[[x]])

  # x列のNAを0に置き換える
  df[[x]][is.na(df[[x]])] <- 0

  formula <- as.formula(paste(y, x, sep = "~"))

  # 単回帰モデルの推定
  regression_model <- lm(formula, data = df)

  # 結果の整形
  tidy_model <- broom::tidy(regression_model)

  # 回帰結果を表にまとめる
  kable_output <- tidy_model |>
    kable() |>
    kable_styling(full_width = FALSE)

  return(kable_output)
}
```

```{r execute_regression}
gradrate_regression(df = df_master, y = "gradrate4yr", x = "after")
```
